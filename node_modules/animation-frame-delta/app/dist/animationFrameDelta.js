let length = 0;
let ls = [];
export default function (func) {
    ls.push(func);
    length++;
}
let ignore = false;
export function ignoreUnsubscriptionError(to = true) {
    ignore = to;
}
export function unsubscribe(func) {
    let at = ls.indexOf(func);
    if (at !== -1) {
        ls.splice(at, 1);
        length--;
    }
    else if (!ignore)
        throw new Error("Invalid request to unsubscribe. Given function is not subscribed.\n\nTo ignore this error globally please call \"reqaf.ignoreUnsubscriptionError()\".\n");
}
const ivertOfAbsoluteDeltaAt60FPS = 60 / 1000;
export const stats = {
    delta: 1,
    absoluteDelta: 1 / ivertOfAbsoluteDeltaAt60FPS,
    timestamp: 0
};
let index; // to prevent GC
const loop = (timestamp) => {
    stats.absoluteDelta = timestamp - lastTimestamp;
    lastTimestamp = stats.timestamp = timestamp;
    stats.delta = stats.absoluteDelta * ivertOfAbsoluteDeltaAt60FPS;
    for (index = 0; index < length; index++) {
        ls[index](stats.delta, stats.timestamp, stats.absoluteDelta);
    }
    requestAnimationFrame(loop);
};
let lastTimestamp;
requestAnimationFrame((timestamp) => {
    lastTimestamp = timestamp;
    requestAnimationFrame(loop);
});
